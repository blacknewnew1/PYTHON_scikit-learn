# -*- coding: utf-8 -*-
"""
Created on Sat Dec 17 16:41:50 2016

@author:yixiaolan
"""

4.import sys  
5.import os  
6.import time  
7.from sklearn import metrics  
8.import numpy as np  
9.import cPickle as pickle  
10.  
11.reload(sys)  
12.sys.setdefaultencoding('utf8')  
13.  
14.# Multinomial Naive Bayes Classifier  
15.def naive_bayes_classifier(train_x, train_y):  
16.    from sklearn.naive_bayes import MultinomialNB  
17.    model = MultinomialNB(alpha=0.01)  
18.    model.fit(train_x, train_y)  
19.    return model  
20.  
21.  
22.# KNN Classifier  
23.def knn_classifier(train_x, train_y):  
24.    from sklearn.neighbors import KNeighborsClassifier  
25.    model = KNeighborsClassifier()  
26.    model.fit(train_x, train_y)  
27.    return model  
28.  
29.  
30.# Logistic Regression Classifier  
31.def logistic_regression_classifier(train_x, train_y):  
32.    from sklearn.linear_model import LogisticRegression  
33.    model = LogisticRegression(penalty='l2')  
34.    model.fit(train_x, train_y)  
35.    return model  
36.  
37.  
38.# Random Forest Classifier  
39.def random_forest_classifier(train_x, train_y):  
40.    from sklearn.ensemble import RandomForestClassifier  
41.    model = RandomForestClassifier(n_estimators=8)  
42.    model.fit(train_x, train_y)  
43.    return model  
44.  
45.  
46.# Decision Tree Classifier  
47.def decision_tree_classifier(train_x, train_y):  
48.    from sklearn import tree  
49.    model = tree.DecisionTreeClassifier()  
50.    model.fit(train_x, train_y)  
51.    return model  
52.  
53.  
54.# GBDT(Gradient Boosting Decision Tree) Classifier  
55.def gradient_boosting_classifier(train_x, train_y):  
56.    from sklearn.ensemble import GradientBoostingClassifier  
57.    model = GradientBoostingClassifier(n_estimators=200)  
58.    model.fit(train_x, train_y)  
59.    return model  
60.  
61.  
62.# SVM Classifier  
63.def svm_classifier(train_x, train_y):  
64.    from sklearn.svm import SVC  
65.    model = SVC(kernel='rbf', probability=True)  
66.    model.fit(train_x, train_y)  
67.    return model  
68.  
69.# SVM Classifier using cross validation  
70.def svm_cross_validation(train_x, train_y):  
71.    from sklearn.grid_search import GridSearchCV  
72.    from sklearn.svm import SVC  
73.    model = SVC(kernel='rbf', probability=True)  
74.    param_grid = {'C': [1e-3, 1e-2, 1e-1, 1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}  
75.    grid_search = GridSearchCV(model, param_grid, n_jobs = 1, verbose=1)  
76.    grid_search.fit(train_x, train_y)  
77.    best_parameters = grid_search.best_estimator_.get_params()  
78.    for para, val in best_parameters.items():  
79.        print para, val  
80.    model = SVC(kernel='rbf', C=best_parameters['C'], gamma=best_parameters['gamma'], probability=True)  
81.    model.fit(train_x, train_y)  
82.    return model  
83.  
84.def read_data(data_file):  
85.    import gzip  
86.    f = gzip.open(data_file, "rb")  
87.    train, val, test = pickle.load(f)  
88.    f.close()  
89.    train_x = train[0]  
90.    train_y = train[1]  
91.    test_x = test[0]  
92.    test_y = test[1]  
93.    return train_x, train_y, test_x, test_y  
94.      
95.if __name__ == '__main__':  
96.    data_file = "mnist.pkl.gz"  
97.    thresh = 0.5  
98.    model_save_file = None  
99.    model_save = {}  
100.      
101.    test_classifiers = ['NB', 'KNN', 'LR', 'RF', 'DT', 'SVM', 'GBDT']  
102.    classifiers = {'NB':naive_bayes_classifier,   
103.                  'KNN':knn_classifier,  
104.                   'LR':logistic_regression_classifier,  
105.                   'RF':random_forest_classifier,  
106.                   'DT':decision_tree_classifier,  
107.                  'SVM':svm_classifier,  
108.                'SVMCV':svm_cross_validation,  
109.                 'GBDT':gradient_boosting_classifier  
110.    }  
111.      
112.    print 'reading training and testing data...'  
113.    train_x, train_y, test_x, test_y = read_data(data_file)  
114.    num_train, num_feat = train_x.shape  
115.    num_test, num_feat = test_x.shape  
116.    is_binary_class = (len(np.unique(train_y)) == 2)  
117.    print '******************** Data Info *********************'  
118.    print '#training data: %d, #testing_data: %d, dimension: %d' % (num_train, num_test, num_feat)  
119.      
120.    for classifier in test_classifiers:  
121.        print '******************* %s ********************' % classifier  
122.        start_time = time.time()  
123.        model = classifiers[classifier](train_x, train_y)  
124.        print 'training took %fs!' % (time.time() - start_time)  
125.        predict = model.predict(test_x)  
126.        if model_save_file != None:  
127.            model_save[classifier] = model  
128.        if is_binary_class:  
129.            precision = metrics.precision_score(test_y, predict)  
130.            recall = metrics.recall_score(test_y, predict)  
131.            print 'precision: %.2f%%, recall: %.2f%%' % (100 * precision, 100 * recall)  
132.        accuracy = metrics.accuracy_score(test_y, predict)  
133.        print 'accuracy: %.2f%%' % (100 * accuracy)   
134.  
135.    if model_save_file != None:  
136.        pickle.dump(model_save, open(model_save_file, 'wb'))  